"""
Team Orchestrator for Code Generation Agents
============================================

This module creates a team of agents that work together to plan and generate
complete full-stack applications. The team consists of:

1. Planner Agent - Creates structured project plans
2. Backend Agent - Generates FastAPI backend code
3. Frontend Agent - Generates React/Next.js frontend code

The team uses shared state to coordinate the development process from
planning to implementation.
"""

import os
from dotenv import load_dotenv
from agno.agent import Agent
from agno.models.openai import OpenAIChat
from agno.team import Team
from agno.tools import tool

# Memory imports for persistent conversational history
from agno.memory.v2.db.sqlite import SqliteMemoryDb
from agno.memory.v2.memory import Memory

# Import agent modules - import the actual agent instances
try:
    from agents.planner_agent import planner_agent
    from agents.backend_agent import backend_agent  
    from agents.frontend_agent import frontend_agent
except ImportError as e:
    print(f"Error importing agents: {e}")
    print("Make sure all agent files exist and are properly configured")
    exit(1)

# Import utilities
from utils.artifact_parser import extract_code_artifacts, save_artifacts_to_files
from utils.frontend_artifact_parser import extract_frontend_code_artifacts, save_frontend_artifacts_to_files

# Load environment variables
load_dotenv()

# Team-level coordination tools
@tool 
def get_development_status(team: Team) -> str:
    """Get overall development status of the project for team leader.
    
    Args:
        team: The team calling this tool (automatically passed)
    """
    shared_state = team.team_session_state
    backend_status = shared_state.get("backend_status", "Not started")
    frontend_status = shared_state.get("frontend_status", "Not started")
    backend_completed = shared_state.get("backend_completed", False)
    frontend_completed = shared_state.get("frontend_completed", False)
    
    status = f"""📊 Development Status:
- Backend: {backend_status} ({'✅ Completed' if backend_completed else '🔄 In Progress'})
- Frontend: {frontend_status} ({'✅ Completed' if frontend_completed else '🔄 In Progress'})
- Files saved to: ./generated/ directory
"""
    return status
@tool
def coordinate_development(team: Team, phase: str) -> str:
    """Coordinate the development process across team members.
    
    Args:
        team: The team calling this tool (automatically passed)
        phase: Development phase to coordinate (planning, backend, frontend, integration)
    """
    shared_state = team.team_session_state
    
    if phase == "planning":
        return "🎯 Planning phase initiated. Planner agent should create project structure."
    elif phase == "backend":
        plan = shared_state.get("project_plan", "")
        if not plan:
            return "❌ Cannot start backend development without a project plan."
        return f"🔧 Backend development phase initiated. Using plan: {plan[:100]}..."
    elif phase == "frontend":
        backend_completed = shared_state.get("backend_completed", False)
        if not backend_completed:
            return "⚠️ Frontend development should wait for backend completion."
        return "🎨 Frontend development phase initiated."
    elif phase == "integration":
        backend_completed = shared_state.get("backend_completed", False)
        frontend_completed = shared_state.get("frontend_completed", False)
        if not backend_completed or not frontend_completed:
            return "❌ Integration requires both backend and frontend to be completed."
        return "🔗 Integration phase: Both backend and frontend completed and files saved to ./generated/ directory."
    
    return f"❓ Unknown phase: {phase}"

@tool
def save_team_artifacts(team: Team, agent_type: str, response_text: str) -> str:
    """Save code artifacts generated by team members to local file system only.
    
    Args:
        team: The team calling this tool (automatically passed)
        agent_type: Type of agent that generated the code (backend or frontend)
        response_text: The response containing code artifacts
    """
    try:
        if agent_type == "backend":
            artifacts = extract_code_artifacts(response_text)
            if artifacts:
                created_files = save_artifacts_to_files(artifacts, "generated/backend")
                # Update only status in team state, not file lists
                team.team_session_state["backend_status"] = f"Completed - {len(created_files)} files generated"
                team.team_session_state["backend_completed"] = True
                return f"✅ Backend artifacts saved: {len(created_files)} files created in generated/backend/"
            else:
                return "⚠️ No backend artifacts found in response"
                
        elif agent_type == "frontend":
            artifacts = extract_frontend_code_artifacts(response_text)
            if artifacts:
                created_files = save_frontend_artifacts_to_files(artifacts, "generated/frontend")
                # Update only status in team state, not file lists
                team.team_session_state["frontend_status"] = f"Completed - {len(created_files)} files generated"
                team.team_session_state["frontend_completed"] = True
                return f"✅ Frontend artifacts saved: {len(created_files)} files created in generated/frontend/"
            else:
                return "⚠️ No frontend artifacts found in response"
        
        return f"❓ Unknown agent type: {agent_type}"
        
    except Exception as e:
        return f"❌ Error saving artifacts: {str(e)}"

# Create the Development Team
def create_development_team():
    """Create a team of development agents with shared state and persistent memory."""
    
    try:
        # Use the existing agents from their respective files
        print(f"✅ Using planner agent: {planner_agent.name}")
        print(f"✅ Using backend agent: {backend_agent.name}")
        print(f"✅ Using frontend agent: {frontend_agent.name}")
        
        # Create memory with SQLite database for persistent conversational history
        memory_db = SqliteMemoryDb(
            table_name="dev_team_memory", 
            db_file="dev_team_memory.db"
        )
        memory = Memory(db=memory_db)
        print(f"✅ Created persistent memory database: dev_team_memory.db")
        
        # Create the development team with memory
        dev_team = Team(
            name="Full-Stack Development Team",
            team_id="dev_team",
            model=OpenAIChat(id="gpt-4o-mini",api_key=os.getenv("OPENAI_API_KEY")),
            members=[planner_agent, backend_agent, frontend_agent],
            
            # Memory configuration for persistent conversational history
            memory=memory,
            add_history_to_messages=True,      # Add chat history to messages
            num_history_runs=10,               # Number of previous runs to include
            enable_user_memories=True,         # Store user preferences/facts
            enable_session_summaries=True,     # Create session summaries
            enable_agentic_memory=True,        # Let team manage memories
            
            # Shared team state - accessible by all members
            team_session_state={
                "project_plan": "",
                "project_plan_completed": False,
                "backend_status": "Not started",
                "frontend_status": "Not started", 
                "backend_completed": False,
                "frontend_completed": False,
                "current_phase": "planning",
                "requirements": "",
            },
            
            # Team coordination tools
            tools=[coordinate_development, save_team_artifacts, get_development_status],
            
            # Team configuration
            mode="coordinate",  # Team leader coordinates member responses
            
            instructions=[
                "You are the Team Leader for a full-stack development team.",
                "Coordinate the development process: Planning → Backend → Frontend → Integration.", 
                "Always check project plan before assigning development tasks.",
                "Use team tools to track progress and save generated code artifacts.",
                "Ensure each phase is completed before moving to the next.",
                "When members generate code, use save_team_artifacts to persist their work.",
                "Provide clear status updates and coordinate handoffs between team members.",
            ],
            
            show_tool_calls=True,
            show_members_responses=True,
        )
        
        print(f"✅ Created development team with persistent memory: {dev_team.name}")
        return dev_team
        
    except Exception as e:
        print(f"❌ Error creating development team: {e}")
        raise

# Orchestrator functions
def run_development_workflow(requirements: str):
    """Run the complete development workflow from requirements to implementation."""
    
    print("🚀 Starting Full-Stack Development Workflow")
    print("=" * 50)
    
    # Create the development team
    team = create_development_team()
    
    # Store requirements in shared state
    team.team_session_state["requirements"] = requirements
    
    print(f"📋 Requirements: {requirements}")
    print()
    
    # Phase 1: Planning
    print("🎯 Phase 1: Project Planning")
    print("-" * 30)
    
    planning_prompt = f"""
    Create a comprehensive project plan for the following requirements:
    {requirements}
    
    The Planner Agent should create a detailed plan including:
    - Project structure
    - Technology stack
    - API endpoints
    - Database schema
    - Frontend components
    - Implementation timeline
    
    Save the plan to shared team state using update_project_plan.
    """
    
    team.print_response(planning_prompt, stream=True)
    print("\n" + "="*50)
    
    # Phase 2: Backend Development
    print("🔧 Phase 2: Backend Development")
    print("-" * 30)
    
    backend_prompt = f"""
    Using the project plan from shared team state, the Backend Agent should:
    
    1. Get the project plan using get_project_plan
    2. Generate complete FastAPI backend code with:
       - Database models
       - API endpoints
       - Authentication (if needed)
       - Configuration files
    3. Use proper <file> tags for all generated code
    4. Update backend status when complete
    
    The Team Leader should save the generated artifacts using save_team_artifacts.
    """
    
    team.print_response(backend_prompt, stream=True)
    print("\n" + "="*50)
    
    # Phase 3: Frontend Development
    print("🎨 Phase 3: Frontend Development")
    print("-" * 30)
    
    frontend_prompt = f"""
    Using the project plan and backend status, the Frontend Agent should:
    
    1. Get the project plan using get_project_plan
    2. Check backend development status
    3. Generate complete React/Next.js frontend code with:
       - Components
       - Pages
       - API integration
       - Styling with Tailwind CSS
       - Configuration files
    4. Use proper <codeartifact> tags for all generated code
    5. Update frontend status when complete
    
    The Team Leader should save the generated artifacts using save_team_artifacts.
    """
    
    team.print_response(frontend_prompt, stream=True)
    print("\n" + "="*50)
    
    # Phase 4: Integration Summary
    print("🔗 Phase 4: Integration Summary")
    print("-" * 30)
    
    summary_prompt = """
    Provide a comprehensive summary of the completed development:
    
    1. Use get_development_status to check overall progress
    2. List all generated files and their purposes
    3. Provide setup instructions for both backend and frontend
    4. Include API documentation and integration points
    5. Suggest next steps for deployment
    
    This completes the full-stack development workflow.
    """
    
    team.print_response(summary_prompt, stream=True)
    print("\n" + "🎉 Development Workflow Complete!")
    
    return team

def interactive_mode():
    """Run the orchestrator in interactive mode."""
    print("🤖 Full-Stack Development Team - Interactive Mode")
    print("=" * 50)
    print("Available commands:")
    print("  /plan <requirements> - Start with project planning")
    print("  /backend - Generate backend code")
    print("  /frontend - Generate frontend code")
    print("  /status - Check development status")
    print("  /workflow <requirements> - Run complete workflow")
    print("  /quit - Exit")
    print()
    
    team = create_development_team()
    
    while True:
        try:
            user_input = input("\n💬 Enter command or message: ").strip()
            
            if user_input == "/quit":
                print("👋 Goodbye!")
                break
            elif user_input.startswith("/plan "):
                requirements = user_input[6:]
                team.team_session_state["requirements"] = requirements
                team.print_response(f"Create a project plan for: {requirements}", stream=True)
            elif user_input == "/backend":
                team.print_response("Generate backend code based on the current project plan", stream=True)
            elif user_input == "/frontend":
                team.print_response("Generate frontend code based on the current project plan and backend", stream=True)
            elif user_input == "/status":
                team.print_response("What is the current development status?", stream=True)
            elif user_input.startswith("/workflow "):
                requirements = user_input[10:]
                return run_development_workflow(requirements)
            else:
                team.print_response(user_input, stream=True)
                
        except KeyboardInterrupt:
            print("\n👋 Goodbye!")
            break
        except Exception as e:
            print(f"❌ Error: {e}")

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        # Run with requirements from command line
        requirements = " ".join(sys.argv[1:])
        run_development_workflow(requirements)
    else:
        # Run in interactive mode
        interactive_mode()
